import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { PieChart } from '@mui/x-charts/PieChart';
import { LineChart } from '@mui/x-charts/LineChart'; 
import { FaUsers, FaBook, FaShoppingCart } from 'react-icons/fa';
import { FaRupeeSign } from 'react-icons/fa6';
import { BarChart } from '@mui/x-charts/BarChart';
import Stack from '@mui/material/Stack';
import ToggleButton from '@mui/material/ToggleButton';
import ToggleButtonGroup from '@mui/material/ToggleButtonGroup';

const Tableau10 = [
  '#4e79a7',
  '#f28e2c',
  '#e15759',
  '#76b7b2',
  '#59a14f',
  '#edc949',
  '#af7aa1',
  '#ff9da7',
  '#9c755f',
  '#bab0ab',
];

const chartsParams = {
  margin: { bottom: 20, left: 25, right: 5 },
  height: 300,
};

const Dashboard = () => {
  const [totalStudents, setTotalStudents] = useState(0);
  const [totalTeachers, setTotalTeachers] = useState(0);
  const [totalCourses, setTotalCourses] = useState(0);
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [totalCoursesSold, setTotalCoursesSold] = useState(0);
  const [courseRevenueData, setCourseRevenueData] = useState([]);
  const [userPerDayData, setUserPerDayData] = useState([]);
  const [color, setColor] = useState('#4e79a7');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const usersResponse = await axios.get('/api/user_details');
        const coursesResponse = await axios.get('/api/course_details');
        const courseStatisticsResponse = await axios.get('/api/course_statistics');
        const userPerDayResponse = await axios.get('/api/users_per_day');

        setTotalStudents(usersResponse.data.totalStudents);
        setTotalTeachers(usersResponse.data.totalTeachers);
        setTotalRevenue(courseStatisticsResponse.data.totalRevenue);
        setTotalCoursesSold(courseStatisticsResponse.data.totalPayments);
        setTotalCourses(coursesResponse.data.totalCourses);
        setCourseRevenueData(courseStatisticsResponse.data.topSoldCourses.map(course => ({
          course: course['Course.title'],
          revenue: parseFloat(course.totalRevenue)
        })));
        setUserPerDayData(userPerDayResponse.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const handleChange = (event, nextColor) => {
    setColor(nextColor);
  };
  const dateFormatter = (value) => {
    // Implement your custom date formatting logic here
    return new Date(value).toLocaleDateString(); // Example: converting to local date string
  };
  

  return (
    <div>
      <div style={boxStyle}>
        <div style={boxItemStyle(totalStudents, 'blue')}>
          <FaUsers size={36} color="white" />
          <h2 style={{ fontSize: '15px' }}>Total Users</h2>
          <p>{totalStudents + totalTeachers}{" "}(Stud: {totalStudents}<span style={{ color: 'Red' }}> || </span>Teach: {totalTeachers})</p>
        </div>
        <div style={boxItemStyle(totalCourses, 'green')}>
          <FaBook size={36} color="white" />
          <h2 style={{ fontSize: '15px' }}>Total Courses</h2>
          <p>{totalCourses}</p>
        </div>
        <div style={boxItemStyle(totalRevenue, '#C70039')}>
          <FaRupeeSign size={36} color="white" />
          <h2 style={{ fontSize: '18px' }}>Revenue Generated</h2>
          <p>Rs. {totalRevenue}</p>
        </div>
        <div style={boxItemStyle(totalCoursesSold, 'Indigo')}>
          <FaShoppingCart size={36} color="white" />
          <h2 style={{ fontSize: '15px' }}>Total Courses Sold</h2>
          <p>{totalCoursesSold}</p>
        </div>
      </div>
      <div>
        <div style={{ ...containerStyle, marginBottom: '20px' }}>
          <div style={{ ...chartBoxStyle, flex: '1', marginRight: '20px' }}>
            <h2>User Distribution</h2>
            <div style={chartContainerStyle}>
              <PieChart series={[{ data: [
                { id: 0, value: totalStudents, label: 'Students' },
                { id: 1, value: totalTeachers, label: 'Teachers' },
              ] }]} width={440} height={220} />
            </div>
          </div>
          <div style={{ ...chartBoxStyle, flex: '1' }}>
            <h2>Revenue generated by top 3 Courses</h2>
            <div style={chartContainerStyle}>
              <BarChart
                width={500}
                dataset={courseRevenueData}
                xAxis={[
                  {
                    scaleType: 'band',
                    dataKey: 'course',
                    tick: {
                      angle: -45,
                      textAnchor: 'end',
                    },
                  },
                ]}
                series={[{ dataKey: 'revenue', label: 'Revenue'}]}
                height={200}
              />
            </div>
          </div>
        </div>
        <div style={chartBoxStyle}>
          <h2>New Users Per Day</h2>
          <div style={chartContainerStyle}>
            <Stack direction="column" spacing={2} alignItems="center" sx={{ width: '100%' }}>
              <LineChart
                {...chartsParams}
                xAxis={[
                  {
                    data: userPerDayData.map(item => new Date(item.date)),
                    scaleType: 'time',
                    valueFormatter: dateFormatter,
                  }
                ]}                series={[
                  {
                    data: userPerDayData.map(item => item.count),
                    label: 'Users per Day',
                    color,
                  },
                  
                ]}
              />
              <ToggleButtonGroup
                value={color}
                exclusive
                onChange={handleChange}
              >
                {Tableau10.map((value) => (
                  <ToggleButton key={value} value={value} sx={{ p: 1 }}>
                    <div
                      style={{
                        width: 15,
                        height: 15,
                        backgroundColor: value,
                        display: 'inline-block',
                      }}
                    />
                  </ToggleButton>
                ))}
              </ToggleButtonGroup>
            </Stack>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

const boxStyle = {
  display: 'flex',
  justifyContent: 'space-around',
  alignItems: 'center',
  flexWrap: 'wrap',
  padding: '20px',
  border: '1px solid #ccc',
  borderRadius: '5px',
  boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
};
const boxItemStyle = (value, color) => ({
  flex: '1',
  margin: '10px',
  padding: '20px',
  border: '1px solid #ccc',
  borderRadius: '5px',
  background: color,
  textAlign: 'center',
  fontSize: '15px',
  color: 'white',
  boxShadow: value === 0 ? '0 0 8px rgba(255, 0, 0, 0.5)' : 'none',
});

const chartBoxStyle = {
  padding: '10px',
  border: '1px solid #ccc',
  borderRadius: '5px',
  background: '#f9f9f9',
  margin: '30px  0 10px 0',
  boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
};

const chartContainerStyle = {
  padding: '10px',
  border: '1px solid #ccc',

};

const containerStyle = {
  display: 'flex',
  justifyContent: 'space-between',
};
